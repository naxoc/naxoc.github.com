<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naxoc.net]]></title>
  <link href="http://naxoc.net/atom.xml" rel="self"/>
  <link href="http://naxoc.net/"/>
  <updated>2014-06-03T22:42:40+02:00</updated>
  <id>http://naxoc.net/</id>
  <author>
    <name><![CDATA[Camilla Krag Jensen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Switching back to Firefox]]></title>
    <link href="http://naxoc.net/2014/06/03/switching-back-to-firefox/"/>
    <updated>2014-06-03T16:38:30+02:00</updated>
    <id>http://naxoc.net/2014/06/03/switching-back-to-firefox</id>
    <content type="html"><![CDATA[<p>I have been using Firefox since it came out. I used it back when it was called Firebird and Phoenix. I went to the release party when 1.0 came out and I have advocated using Firefox to anybody that wanted to listen &mdash; and a few that didn&rsquo;t.</p>

<p>2-3 years ago I switched to Chrome along with a lot of other people. Firefox was getting bloated and Chrome had all kinds of shiny tools. But I am back to using Firefox now, and I thought I would explain what lured me back in this post.</p>

<p>I didn&rsquo;t switch because I was tired of, or unhappy with Chrome. I still use both so that I can be logged in to work stuff in one and my own stuff in the other. But I mainly use Firefox for web development now. It should be said that I use the <a href="http://www.mozilla.org/en-US/firefox/channel/#beta">Firefox Beta</a> version and I have had no problems with that. The reason I use the beta is that I really like a couple of the developer tool features, but version 29 also has nice developer tools.</p>

<p>These are some of the features and tools that have impressed me:</p>

<h2>Developer Toolbar</h2>

<p>Of all the shiny things this one was the one that made me switch. Firefox now has a developer toolbar that sits at the bottom of the page for as long as you want it around. Toggle it with Tools > Web Developer > Developer Toolbar. I just keep it around at all times. To change focus and go to it use <code>shift+F2</code>. You can run commands from text in the toolbar and it also shows a little red badge if there are javascript errors on the page.</p>

<h3>So what does it do?</h3>

<p>Well, it&rsquo;s a browser command line for web developers. Try typing <code>help</code> and get a list of commands. I use the <code>cookie</code> and <code>inspect [element]</code> most, but the <code>resize toggle</code> is pretty sweet too. Just like CLI it has completion and arrow up gets your history of commands. Another really cool one is <code>media emulate print</code> &mdash; it will show you the page with the print style sheet (or whatever media you put after emulate).</p>

<p>All these things can be done with the mouse too I&rsquo;m sure, but I like it that I can access these tools really fast with a browser CLI.</p>

<p><img class="center" src="http://naxoc.net/img/firefox-developer-tools/cookies.png">
The screenshot shows output from the command <code>cookie list</code>. You can find more info on the toolbar in the <a href="https://developer.mozilla.org/en-US/docs/Tools/GCLI">mozilla.org docs</a>.</p>

<h2>Scratchpad</h2>

<p>The scratchpad is a &lsquo;js-editor&rsquo; that lives in its own window. Invoke it from the Tools > Web Developer menu or by going <code>shift+F4</code>. You can write js and execute it with one of the three buttons. The code you write will be in the scope of the browser window you were in when you invoked the scratchpad so you can test your jQuery snippets or whatever does it for you. There are instructions on how to use the buttons in the comment that is displayed at the top of the file. One thing that is left out that is super helpful though is <code>cmd+shift+r</code>. That will reload the browser window, but keep your js code in the scratchpad.</p>

<p>The keyboard shortcuts are the same as for the style editor and the debugger. There are even key bindings for emacs and vim! To set key bindings, go to <code>about:config</code> in Firefox&rsquo;s location bar and set <code>devtools.editor.keymap</code> to &ldquo;vim&rdquo; or &ldquo;emacs&rdquo;.</p>

<h2>Pretty inspector</h2>

<p>This one is very subjective, but I think that the inspector and the whole developer tools is really pretty. I use the light color scheme, and it just looks better than Chrome&rsquo;s dev tools. I know, but I had to get that one of my chest. There is a dark color scheme setting in the options (click the gear).</p>

<p>There is a font preview tab in the right box on the inspector tab. It&rsquo;s nice to have a clue about the font. I am not a designer, so most the time I don&rsquo;t have a clue. This helps:</p>

<p><img class="center" src="http://naxoc.net/img/firefox-developer-tools/fonts.png"></p>

<p>Another cool thing about the inspector is the &ldquo;guides&rdquo; it shows when it highlights an element. It is best illustrated with an image. I am talking about the dotted lines that helps you see if you are aligned with what you want to be aligned with.</p>

<p><img class="center" src="http://naxoc.net/img/firefox-developer-tools/inspector.png"></p>

<h2>Network tab</h2>

<p>Like with the inspector &mdash; I just think it&rsquo;s pretty. And there are some useful things too! The filtering in the right hand box is really good. There is also a view with pie charts showing the page loaded twice: once with an empty browser cache and once with a primed browser cache. It is quite interesting to compare the two when you are slimming your page weight down. To get to it click the button on the lower right hand when on the network tab: <img src="http://naxoc.net/img/firefox-developer-tools/cache-button.png"></p>

<p>You then get this:</p>

<p><img class="center" src="http://naxoc.net/img/firefox-developer-tools/primed-cache.png"></p>

<p>See more about the network tab at the developer docs on <a href="https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor">mozilla.org</a></p>

<h2>Mobile version</h2>

<p>I have an Android phone whose factory default browser is Chrome. Firefox can sync between desktop and phone just like Chrome and I think it is as fast. Plus I also just like how it looks.</p>

<h2>So what?</h2>

<p>I don&rsquo;t have a strong enough opinion to start a browser war. I like both Chrome and Firefox and I will continue to use both. This blog post is just to describe the new cool stuff in Firefox and once again &mdash; whether you want to listen or not &mdash; I encourage you to try Firefox and play around with the new dev tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom editor update problem]]></title>
    <link href="http://naxoc.net/2014/05/18/atom-editor-update-problem/"/>
    <updated>2014-05-18T20:51:03+02:00</updated>
    <id>http://naxoc.net/2014/05/18/atom-editor-update-problem</id>
    <content type="html"><![CDATA[<p>I have been playing around with Github&rsquo;s new editor <a href="http://atom.io">Atom</a> for a while now. I actually quite like it, but it still hasn&rsquo;t taken Vim&rsquo;s place as my default editor yet. Maybe it will at some point, but we&rsquo;ll see.</p>

<p>Atom updates itself and that has been working great, only it stopped working a while ago. It threw some long error to the GUI editor that I can&rsquo;t remember and when I tried to run <code>apm upgrade</code> it said:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~  apm upgrade
</span><span class='line'>Package Updates Available (0)
</span><span class='line'>└── (empty)</span></code></pre></td></tr></table></div></figure>


<p>&mdash; even though in the UI it said it had an update ready.</p>

<p>I poked around a for a while until I found a couple of mentions in the support forums <a href="http://discuss.atom.io/t/cant-install-or-update-packages/1623">like this one</a> saying that you should just set file permissions on your <code>~/.atom/.node-gyp</code> folder. So I did</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod -R 777 ~/.atom/.node-gyp</span></code></pre></td></tr></table></div></figure>


<p>and restarted the GUI Atom.app. Now my update was applied and everybody was happy again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch between PHP versions with Homebrew]]></title>
    <link href="http://naxoc.net/2014/05/07/switch-between-php-versions-with-homebrew/"/>
    <updated>2014-05-07T20:25:40+02:00</updated>
    <id>http://naxoc.net/2014/05/07/switch-between-php-versions-with-homebrew</id>
    <content type="html"><![CDATA[<p>I am working on a few older Drupal sites that are quite insistent on using PHP 5.3 and not PHP 5.4. No problem &ndash; I&rsquo;ll just use Homebrew to switch between versions! But I have been running into all kinds of problems every time I have done this, so I figured I would post what I do to repair things here.</p>

<p>So, in theory all you should have to do is install the versions you need if you don&rsquo;t already have them.
<code>brew install php53</code>
And when you want to switch just run this:
<code>brew unlink php54 &amp;&amp; brew link php53</code></p>

<p>Apache also needs to know what version to use, so edit <em>/private/etc/apache2/httpd.conf</em> so that the line that looks like this has the right (major) version number:
<code>LoadModule php5_module /usr/local/opt/php54/libexec/apache2/libphp5.so</code></p>

<p>So far so good. You can check the version from the command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~  php --version
</span><span class='line'>PHP 5.3.28 (cli) (built: May  7 2014 09:50:08)
</span><span class='line'>Copyright (c) 1997-2013 The PHP Group
</span><span class='line'>Zend Engine v2.3.0, Copyright (c) 1998-2013 Zend Technologies
</span><span class='line'>    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans</span></code></pre></td></tr></table></div></figure>


<p>If you are not seeing what you expect, try adding add this to your <em>.bashrc</em> or <em>.zshrc</em> with the correct version number:
 <code>export PATH="$(brew --prefix homebrew/php/php54)/bin:$PATH"</code></p>

<p>If things are working now thats great! It doesn&rsquo;t always for me. I get this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~  php -i
</span><span class='line'>dyld: Library not loaded: /usr/local/lib/libpng15.15.dylib
</span><span class='line'>  Referenced from: /usr/local/opt/php53/bin/php
</span><span class='line'>  Reason: image not found</span></code></pre></td></tr></table></div></figure>


<p>Sadly the only workaround I have found is to uninstall and install again:
  <code>brew uninstall php53 &amp; brew install php53</code></p>

<p>  It takes quite a long time but it does the trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyboard shortcuts in PHPStorm]]></title>
    <link href="http://naxoc.net/2014/02/08/keyboard-shortcuts-in-phpstorm/"/>
    <updated>2014-02-08T13:27:35+01:00</updated>
    <id>http://naxoc.net/2014/02/08/keyboard-shortcuts-in-phpstorm</id>
    <content type="html"><![CDATA[<p>Coming from Vim to PHPStorm I use the mouse a whole lot more than I did before. Vim is amazing once you learn it and the mouse can take long naps when you do everything with keyboard commands. PHPStorm is a great IDE, so I switched because I felt like I got so much more good stuff like the debugger, easy refactoring, structural overview, and so on. In the beginning I used the IdeaVim plugin in PHPStorm so editing seemed more like Vim, but I ended up abandoning that because I found it buggy.</p>

<p>Anyway. I slowly learned new keyboard shortcuts for PHPStorm and I wanted to share some of my favorites. Jetbrains has a <a href="http://www.jetbrains.com/phpstorm/webhelp/keyboard-shortcuts-you-cannot-miss.html">a list of keyboard shortcuts you cannot miss</a> too, but most of the ones I find to be super useful are not on that list.</p>

<p>It should be said that I am on a Mac using the &ldquo;Mac OS X 10.5&rdquo; <a href="https://www.jetbrains.com/phpstorm/webhelp/keymap.html">keymap in PHPstorm</a>.</p>

<h2>Navigating</h2>

<ul>
<li><code>command+[</code> and <code>command+]</code> to go back to the place in the code where you just were or forward respectively.</li>
<li><code>command+shift+delete</code> go back to the last place in code you edited.</li>
<li><code>cmd+F12</code> bring up a quick window with all functions/classes in the current file. Type to filter and go to. I use this one all the time. I realise that I could also just use <code>option+command+o</code>, but this one is much faster and narrowing down is easier.</li>
</ul>


<h2>Tools</h2>

<ul>
<li><code>command+1</code> toggles the project pane that shows the file tree. For extra usefulness, do this one time setting: Click the gear in the menu and choose &ldquo;autoscroll from source&rdquo;. Now the tree always shows you where you are in the file structure.</li>
<li><code>command+3</code> toggles the &ldquo;find&rdquo; pane. Useful for going back to see a global search done with <code>command+shift+f</code>. To navigate between search results use <code>command+option+arrow-up/down</code></li>
<li><code>commmand+5</code> toggles the debugger pane.</li>
<li><code>command+7</code> toggles the PHP structure pane.</li>
<li><code>command+9</code> toggles the version control pane. I don&rsquo;t use this a whole lot&mdash;-I prefer the command line for Git, but there are some nice features in the VCS tools in PHPStorm. My favorite VCS keyboard shortcut (actually this one is kind of a sequence) is <code>ctrl+v</code> and then hit 5 to get a Git blame panel.</li>
</ul>


<h2>In the debugger</h2>

<ul>
<li><code>option+command+r</code> will resume.</li>
<li><code>command+f2</code> will stop (kill).</li>
<li><code>F8</code> will step.</li>
<li><code>shift+command+F8</code> will show you a list of all your breakpoints.</li>
</ul>


<p>These are some of my favorites. Comment and share yours!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax highlighting commands with Zsh]]></title>
    <link href="http://naxoc.net/2014/02/02/syntax-highlighting-commands-with-zsh/"/>
    <updated>2014-02-02T13:48:19+01:00</updated>
    <id>http://naxoc.net/2014/02/02/syntax-highlighting-commands-with-zsh</id>
    <content type="html"><![CDATA[<p>I started using zsh about a year ago after having resisted it with a passion.
My main worry was that I would &ldquo;forget how to bash&rdquo; and be lost on various servers I log in to. While there are some nifty things I have gotten a little too used to in zsh, I don&rsquo;t think it has been a big problem.</p>

<p>One thing that visually tells me that I am in zsh and not bash is that my zsh terminal syntax highlights as I type. Yes, you read that correctly. If you are not familiar with the <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> prepare to have your mind blown.</p>

<p>When you are typing a command you get a yellow color:</p>

<p><img src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/zsh/zsh-syntax-1.png"></p>

<p>Then when you have typed something that actually is a command you get green:</p>

<p><img src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/zsh/zsh-syntax-2.png"></p>

<p>When you make a typo you get red:</p>

<p><img src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/zsh/zsh-syntax-3.png"></p>

<p>It also makes correctly quoted strings yellow. I find that a nice help too:</p>

<p><img src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/zsh/zsh-syntax-4.png"></p>

<p>On the <a href="https://github.com/zsh-users/zsh-syntax-highlighting">Github project</a> readme there are instructions for installing the plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Placeholder selectors in SASS]]></title>
    <link href="http://naxoc.net/2014/01/28/placeholder-selectors-in-sass/"/>
    <updated>2014-01-28T19:45:00+01:00</updated>
    <id>http://naxoc.net/2014/01/28/placeholder-selectors-in-sass</id>
    <content type="html"><![CDATA[<p>When I found that you can &lsquo;@extend&rsquo; classes in SASS to reuse code and compile to neater CSS I was pretty excited. Here is an example of &lsquo;inheriting&rsquo; code with @extend:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.speak</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">font-family</span><span class="o">:</span> <span class="n">Courier</span> <span class="n">New</span><span class="o">,</span> <span class="no">monospace</span><span class="p">;</span>
</span><span class='line'>  <span class="na">max-width</span><span class="o">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">clear</span><span class="o">:</span> <span class="no">both</span><span class="p">;</span>
</span><span class='line'>  <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@extend</span> <span class="nc">.speak</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="ni">magenta</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@extend</span> <span class="nc">.speak</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">float</span><span class="nd">:</span> <span class="nt">right</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will compile to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.speak</span><span class="o">,</span> <span class="nc">.voice-1</span><span class="o">,</span> <span class="nc">.voice-2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="n">Courier</span> <span class="n">New</span><span class="o">,</span> <span class="k">monospace</span><span class="p">;</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">clear</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.speak</span> <span class="nt">span</span><span class="o">,</span> <span class="nc">.voice-1</span> <span class="nt">span</span><span class="o">,</span> <span class="nc">.voice-2</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-1</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">magenta</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-2</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So <code>voice-1</code> and <code>voice-2</code> get the same properties as the <code>speak</code> class and the code is reused. All is good, but I don&rsquo;t really have a class called <code>speak</code>. And more importantly &ndash; I want to be able to define my <code>speak</code> selector in a base file that is included in lots of other .scss files so that it becomes truly reusable. But here I run into the problem that every time I include the _base.scss file, the selector gets written to the file including the file. That becomes a mess of repeated code really fast.</p>

<p>I found out about SASS placeholder selectors recently and once again my mind was blown. So a placeholder selector is a selector just like <code>.speak</code>, but instead of a dot (for class) it is prefixed with a percent sign. Selectors prefixed with <code>%</code> don&rsquo;t get rendered to CSS, so I don&rsquo;t have to worry about duplicated code or not actually having a class somewhere called <code>speak</code>. Now I can define the selector in a base file and extend it over and over in included files.</p>

<p>So:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="err">%</span><span class="nt">speak</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">font-family</span><span class="o">:</span> <span class="n">Courier</span> <span class="n">New</span><span class="o">,</span> <span class="no">monospace</span><span class="p">;</span>
</span><span class='line'>  <span class="na">max-width</span><span class="o">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">clear</span><span class="o">:</span> <span class="no">both</span><span class="p">;</span>
</span><span class='line'>  <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span>
</span><span class='line'>    <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@extend</span> <span class="err">%</span><span class="nt">speak</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="ni">magenta</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@extend</span> <span class="err">%</span><span class="nt">speak</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">float</span><span class="nd">:</span> <span class="nt">right</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.voice-1</span><span class="o">,</span> <span class="nc">.voice-2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="n">Courier</span> <span class="n">New</span><span class="o">,</span> <span class="k">monospace</span><span class="p">;</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">clear</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-1</span> <span class="nt">span</span><span class="o">,</span> <span class="nc">.voice-2</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-1</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">magenta</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.voice-2</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Here is a Codepen with the placeholder selectors (and some Monty Python). If you want to play around with it, take note of the &ldquo;view compiled&rdquo; link in the lower right corner when you are on the SCSS tab.</p>

<p data-height="339" data-theme-id="0" data-slug-hash="idqFC" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/naxoc/pen/idqFC'>SASS placeholder selectors example</a> by Camilla Krag Jensen (<a href='http://codepen.io/naxoc'>@naxoc</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing code when using Modernizr and SASS]]></title>
    <link href="http://naxoc.net/2014/01/15/organizing-code-when-using-modernizr-and-scss/"/>
    <updated>2014-01-15T12:45:00+01:00</updated>
    <id>http://naxoc.net/2014/01/15/organizing-code-when-using-modernizr-and-scss</id>
    <content type="html"><![CDATA[<p>The JS library <a href="http://modernizr.com">Modernizr</a> makes it really easy to write CSS with support for older browsers. What it does is put classes in the <code>&lt;body&gt;</code> tag that will tell you what the browser doesn&rsquo;t support. For instance IE9 in the screenshot does not support CSS gradients:</p>

<p><img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/modernizr_body_tag_classes.png"></p>

<p>I was going trough with IE9 on a rather large site that uses some spiffy CSS3 tricks to achieve awesome. It has been a pleasure to work with <a href="http://compass-style.org/">Compass</a> and SASS to build the site, but when it came to making it look decent in IE9 there was some work to be done.</p>

<p>I started to work on it, but I quickly got frustrated with the organization of the SCSS. Where should I put the IE-fallbacks? In a ie9.css style sheet? Well, that really keeps the code scattered everywhere. I wanted to keep the fallbacks as close to the original CSS3 tricks as I could so I started putting code like this as close to the &ldquo;real&rdquo; selector as I could:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.some-div</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.special-list</span> <span class="p">{</span>
</span><span class='line'>    <span class="nc">.extra-special-link</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> background</span><span class="p">(</span><span class="nf">linear-gradient</span><span class="p">(</span><span class="no">left</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">30</span><span class="kt">%</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">70</span><span class="kt">%</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="p">))</span><span class="o">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Also support archaic browsers for the extra special link (see above).</span>
</span><span class='line'><span class="nc">.no-cssgradients</span> <span class="nc">.some-div</span> <span class="nc">.special-list</span> <span class="nc">.extra-special-link</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this works, it becomes hard to find out what the targets are, because the whole structure needs to be prefixed with the <code>no-cssgradients</code> class. I would much rather have the fallbacks in the code right next to the &lsquo;actual&rsquo; CSS. I did some googling for best practices for structuring the code and found <a href="http://neilcarpenter.com/2013/05/graceful-degradation-workflow-using-feature-detection-and-css-preprocessors/">this post</a> on Neil Carpenter&rsquo;s blog that showed me that the &lsquo;&amp;&rsquo; ampersand used <em>behind</em> the selector will do exactly what I wanted! This may be really trivial, but I had no idea the ampersand could be used like that in SASS. So the above code can be simplified to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.some-div</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.special-list</span> <span class="p">{</span>
</span><span class='line'>    <span class="nc">.extra-special-link</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> background</span><span class="p">(</span><span class="nf">linear-gradient</span><span class="p">(</span><span class="no">left</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">30</span><span class="kt">%</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">70</span><span class="kt">%</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="p">))</span><span class="o">,</span>
</span><span class='line'>      <span class="o">.</span><span class="n">no-cssgradients</span> <span class="o">&amp;</span> <span class="p">{</span>
</span><span class='line'>        <span class="na">background</span><span class="o">:</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">242</span><span class="o">,</span> <span class="mi">156</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay! I can now keep my fallbacks together with the actual CSS and never worry about ie9.css or other tricks that separate the fallbacks from reality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Format json output from cUrl neatly]]></title>
    <link href="http://naxoc.net/2013/11/22/format-json-output-from-curl-neatly/"/>
    <updated>2013-11-22T14:27:00+01:00</updated>
    <id>http://naxoc.net/2013/11/22/format-json-output-from-curl-neatly</id>
    <content type="html"><![CDATA[<p>Here is a short simple tip to read json output from curl in a neat formatted way:</p>

<p>Pipe the output to Python like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl "http://url.to.call?args=hi" | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>This will prettify the output and make json much more readable when testing webservices. It also validates the json, so if it contains errors you will get a warning.</p>

<p>It works with Python 2.6 and higher and you can find more info at the <a href="http://docs.python.org/2/library/json.html">Python docs page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color schemes and productivity]]></title>
    <link href="http://naxoc.net/2013/11/10/color-schemes-and-productivity/"/>
    <updated>2013-11-10T13:45:00+01:00</updated>
    <id>http://naxoc.net/2013/11/10/color-schemes-and-productivity</id>
    <content type="html"><![CDATA[<p>Almost all programmers have a color scheme or theme in their terminal and their code editor. Some people actually turns syntax highlighting off, but I will never understand that. To me &ndash; code is something that lives on a black or dark background and has syntax colors. I have only ever used a white background color scheme back when I was using Eclipse 8 years ago. And probably because I couldn&rsquo;t figure out how to set another color scheme than the one that comes with Eclipse.</p>

<p>Lately I have been really bothered by reflections in my glossy screen om my MBP and my Apple Cinema Display (I know &ndash; first world problem). In the afternoon all I could really see was me &ndash; like I was looking in a mirror. While that is very enjoyable it is not the way to get work done, so I set out to find a color scheme that would make it easier to see what I am working on and not myself so much. In that process I found out that I am super sensitive to changes in my editor work setup. Change the colors a little and I have a hard time reading through code fast. It is weird and a little bit stupid that it is so, but I can&rsquo;t help it. It takes me about 2 weeks to get reasonably comfortable with changes to a color scheme.</p>

<p>This blog post is really just a listing and some screen shots of the color schemes I like. And let me tell you right now: there is no dark background color scheme that solves the glare problem &ndash; I tried tons of them and none of them are magic. Moving your chair or source of light solves some of the glare problems, but if Apple would just go back to offering a non-glare version it would be a lot easier.</p>

<h2>The ones I like</h2>

<h3>Desert theme</h3>

<p>I really like the &ldquo;Desert&rdquo; color scheme that comes with Vim as one of the default color schemes.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/color-scheme/vim-desert.png" title="'Vim desert color scheme'" >
The only thing I find a little annoying is the hysterically yellow line numbers. I have put this line in my .gvimrc to tone down line numbers after the color scheme is applied:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">hi</span> LineNr guifg<span class="p">=</span>grey50 guibg<span class="p">=</span>grey20
</span></code></pre></td></tr></table></div></figure>


<p>That is better:
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/color-scheme/desert-grey-numbers.png" title="'Vim desert theme with grey line numbers'" >
I haven&rsquo;t found a desert color scheme for PHPStorm yet. I also don&rsquo;t really like to use it in the terminal, so I guess the desert theme is a Vim thing for me.</p>

<h3>Tomorrow</h3>

<p>In both the terminal and PHPStorm I use the <a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow theme</a>. It comes with support for a ton of different applications and is really well thought out. I started using this one because it has a white background version too. So much like the popular <a href="http://ethanschoonover.com/solarized">Solarized</a> theme it can use the same colors on light and dark background.
In the terminal I mainly use Tomorrow Night Eighties and in PHPStorm I switch between Tomorrow Night Eighties and just plain Tomorrow.</p>

<p>Here is the dark version (Tomorrow Night Eighties).
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/color-scheme/tomorrow-night-eighties-phpstorm.png" title="'Tomorrow Night Eighties in PHPStorm'" >
And here is the light version (Tomorrow).
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/color-scheme/tomorrow-phpstorm.png" title="'Tomorrow theme in PHPStorm'" ></p>

<p>I still mostly use the dark version, but when glare becomes too much I can pretty comfortably switch to the light version and still get stuff done. It is crazy how sensitive I am to having the colors be recognizable.</p>

<h2>Darcula</h2>

<p>This is the color scheme that comes with the look and feel for PHPStorm called Darcula. I think it is really good looking and I can use it &ndash; but only if there is not too much light. It is a little on the low contrast side.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/color-scheme/darcula.png" title="'Darcula theme'" ></p>

<h2>The one I don&rsquo;t like so much</h2>

<h3>Solarized</h3>

<p>I realize that all code snippets on my blog use solarized. It is mainly because I haven&rsquo;t taken the time to change it. It really is not as simple as you would think in Octopress. Ironically &ndash; on the documentation site for Octopress solarized is not used. I haven&rsquo;t figured out what theme it using. Maybe it is solarized without the yellow background and just plain white.</p>

<p>Anyway. No reason the hate on solarized. So many people use it and love it. I just happen to think that the dark version has almost zero contrast and the yellow version makes me want to pee.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding unused images in your website code]]></title>
    <link href="http://naxoc.net/2013/10/28/finding-unused-images-in-your-website-code/"/>
    <updated>2013-10-28T21:45:00+01:00</updated>
    <id>http://naxoc.net/2013/10/28/finding-unused-images-in-your-website-code</id>
    <content type="html"><![CDATA[<p>I was doing a lot of changes to CSS files today &ndash; mainly deleting a whole lot of stuff. I wanted to see if there were image files that were referenced by CSS that were no longer in use, so I wrote this naïve little script that loops through all image files it finds in the dir you give it to see if there are references to the image files.</p>

<p>If you have <a href="https://github.com/ggreer/the_silver_searcher">The Silver Searcher</a> (ag) installed the script is much faster. Without Silver Searcher the script uses grep. If you don&rsquo;t know Silver Searcher go check it out &ndash; it is super fast.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">DIR</span><span class="o">=</span>.
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$1&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">DIR</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Find image files in.</span>
</span><span class='line'><span class="nv">FILES</span><span class="o">=</span><span class="sb">`</span>find <span class="nv">$DIR</span> -type f | grep <span class="s2">&quot;.*\.\(jpg\|gif\|png\|jpeg\)&quot;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Default searcher is grep. If Silver Searcher is installed, use that.</span>
</span><span class='line'><span class="nv">SEARCHER</span><span class="o">=</span><span class="s1">&#39;grep -r -l &#39;</span>
</span><span class='line'><span class="k">if </span><span class="nb">command</span> -v ag
</span><span class='line'><span class="k">then</span>
</span><span class='line'>  <span class="c"># Sweet! Let&#39;s use Silver Searcher.</span>
</span><span class='line'>  <span class="nv">SEARCHER</span><span class="o">=</span><span class="s1">&#39;ag -l &#39;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Loop over image files.</span>
</span><span class='line'><span class="k">for </span>f in <span class="nv">$FILES</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[[</span> -f <span class="nv">$f</span> <span class="o">]]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">name</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$f</span><span class="k">)</span>
</span><span class='line'>    <span class="nv">found</span><span class="o">=</span><span class="k">$(</span><span class="nv">$SEARCHER</span> <span class="nv">$name</span> <span class="nv">$DIR</span><span class="k">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> -z <span class="nv">$found</span> <span class="o">]]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="nv">$f</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/naxoc/7203765">Gist is here</a> &ndash; I find that the gist plugin for Octopress is  broken.</p>

<h2>How to use the script</h2>

<ol>
<li>Don&rsquo;t use windows.</li>
<li>Download the gist and put it somewhere in your project.</li>
<li>cd to the script in your command line and go <code>chmod u+x unused-images.sh</code></li>
<li>Run the script by going <code>sh unused-images.sh</code> or <code>/.unused-images.sh</code>. If you pass a directory as an argument you will search in that dir only. If you don&rsquo;t pass an argument the script will search in the dir it is in, so be a little bit careful with doing that in a directory that contains thousands of files.</li>
</ol>


<p>The script outputs the images that have no references. So if you feel courageous you can delete the unused image files by piping the output to xargs and delete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./unused-images.sh themes | xargs rm
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows in VirtualBox on the Mac]]></title>
    <link href="http://naxoc.net/2013/10/22/windows-in-virtualbox-on-the-mac/"/>
    <updated>2013-10-22T21:06:00+02:00</updated>
    <id>http://naxoc.net/2013/10/22/windows-in-virtualbox-on-the-mac</id>
    <content type="html"><![CDATA[<p>I have been doing more CSS and front-end stuff lately. I am having a lot of fun learning more about these things that I have somehow avoided doing for the last many years.</p>

<p>Today I realized that I don&rsquo;t have to own a MS Windows license to run a setup in a VM for browser-testing. While I don&rsquo;t hate Microsoft (anymore) I would really rather not buy a license for a product that I think is horrible. Anyway &ndash; I had no idea that it is super simple to set up a VM running whatever version of IE you want on Windows.</p>

<p>Installing the disk image was easy and I was up and running in very short time. I did however struggle a little with getting Windows to recognize the localhost (my Mac) and the vhosts I have on my local machine. I do all my development on my localhost, so I really needed Windows to understand my vhosts. Here is a writeup of what I did:</p>

<p>Note that I installed Win7 &ndash; the instructions for editing the hosts file might be different on other versions of Windows.</p>

<h2>Install VirtualBox</h2>

<p>First you need to install VirtualBox if you don&rsquo;t have it. Go grab an installer from the <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox Downloads page</a> and install it.</p>

<h2>Install the Windows image</h2>

<p>Now go to <a href="http://www.modern.ie/en-us/virtualization-tools">modern.ie&rsquo;s download page</a> and download a virtual machine in the IE version you would like to test stuff on. For this writeup I got an IE9 on Win7. Note that instead of downloading a lot of rar-files, you can just grab a cUrl command at the bottom of the downloadboxes and paste that into your terminal.</p>

<p>This part takes a good while, so be patient.</p>

<h2>Configure networking in VirtualBox</h2>

<p>Before you start Windows, you need to configure networking in VirtualBox. So go to VirtualBox and choose &lsquo;Preferences&rsquo; from the menu (or go Command-,). In the settings window &ndash; click &ldquo;Network&rdquo; and choose the &ldquo;Host-only Networks&rdquo; tab. On that tab there is a plus that you just click and accept. I didn&rsquo;t have to configure anything &ndash; I just got a configuration called <em>vboxnet0</em>. Go ahead and close preferences &ndash; this is a onetime setup thing. All images you install will be able to use these settings (if you want).
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/vm/vbox-networks.png" title="'Host-only Networks'" ></p>

<h2>Boot up Windows</h2>

<p> Now you can double click the image in VirtualBox&rsquo;s main window to start up Windows. Yup &ndash; you get the Windows sound.</p>

<h2>Find the Gateway</h2>

<p>Once Windows has booted up we need to configure the image to talk to our localhost. Click the start button or whatever it&rsquo;s called and type &lsquo;cmd&rsquo; in the textfield to get a &ldquo;terminal&rdquo;. Type <code>ipconfig</code> at the prompt and find the part in the output where it says &ldquo;Default Gateway&rdquo; under the &ldquo;Ethernet adapter Local Area Connection&rdquo;. Note that IP. It should be something like 10.0.x.x. Mine is 10.0.2.2.</p>

<h2>Set file permissions on the hosts file</h2>

<p>Now we need to edit Windows&#8217; hosts-file so that the vhosts we have on our Mac can be used. But first we have to change the file rights on the file. To open the Finder thingy, type <code>explorer C:\Windows\System32\drivers\etc</code> in at the prompt. That gives you the folder with the hosts-file. Now right click on that and select &ldquo;Properties&rdquo;. In the window you get, click the &ldquo;Security&rdquo; tab and then click the &ldquo;Edit button&rdquo;.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/vm/win7-edit-file-rights-1.png" title="'File permissions'" >
 Select the &ldquo;Users&rdquo; group/user and tick the &ldquo;Full control&rdquo; box.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/vm/win7-edit-file-rights-2.png">
All this probably is a horrible idea securitywise, but I don&rsquo;t really care &ndash; I&rsquo;ll use this Windows install very little. Click save and you&rsquo;re good.</p>

<h2>Edit the hosts file</h2>

<p>Now we can edit the hosts file. Double click on the hosts file and choose Notepad in the &ldquo;Open with dialog&rdquo;. Now you can add the urls that you have set up as vhosts on your Mac. Use the 10.0.x.x IP address from the <code>ipconfig</code> command like this for example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.2.2 d7.dev 
</span><span class='line'>10.0.2.2 d8.dev </span></code></pre></td></tr></table></div></figure>


<p>Save the file and you&rsquo;re done! I made a desktop shortcut to the file because I feel like I&rsquo;ll be back for more vhost-editing soon.</p>

<h2>Use IE!</h2>

<p>Now you can see your Mac&rsquo;s webserver&rsquo;s pages from your VM. So open up IE(!) and go to whatever url you put in the hosts file. I just want to point out one last thing: There is a Firebug Lite to be found in (this) IE if you click the gear in the upper right corner.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/vm/firebug-lite.png"></p>

<p>Hope you found this very verbose walktrough helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a file watcher for Compass in PHPStorm]]></title>
    <link href="http://naxoc.net/2013/10/06/setting-up-a-file-watcher-for-compass-in-phpstorm/"/>
    <updated>2013-10-06T20:55:00+02:00</updated>
    <id>http://naxoc.net/2013/10/06/setting-up-a-file-watcher-for-compass-in-phpstorm</id>
    <content type="html"><![CDATA[<p>EDIT: <em>It seems that the version 7 early access now has a file watcher preset for Compass &ndash; nice work JetBrains! The part about scope from this blog post is still useful to you if you are on PHPStorm 7 though.</em></p>

<p>I started using PHPStorm about 6 months ago and while it is an extremely awesome and powerful IDE there are just so many things you can set up and configure. I have to admit that for the first couple of months I pretty much used PHPStorm just like I did Vim and not using any of the many configurable things except for the debugger. I am slowly venturing into playing around with setting more stuff up, and I thought I would share this one because it took me a while to get right.</p>

<p>It is super simple to use the <a href="http://compass-style.org/">Compass compiler</a> from the command line and I always have. But PHPStorm can compile your .scss files into .css on the fly so why not take advantage of that.</p>

<p>So here is what I did. The settings assume that you use something that resembles the default settings in a Compass project with a folder for the scss files and the css being output to another folder called something like &ldquo;stylesheets&rdquo; or &ldquo;css&rdquo; (could be anything really). You also need to have <a href="http://compass-style.org/install/">Compass installed on your machine</a>.</p>

<ol>
<li>In the PHPStorm settings, go to &ldquo;File Watchers&rdquo;.</li>
<li>Click the plus to add a watcher and choose SCSS.</li>
<li>Edit the settings to look like the ones on the screenshot. Where Compass is installed on your machine may not be in /usr/bin/compass like it is on mine, but you can use the command <code>whereis compass</code> from your command line to figure out where compass is. The output path is &ldquo;stylesheets&rdquo; for me for this particular project, but you shold edit that to whatever your project has named the css output folder.</li>
</ol>


<p><img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/compass-phpstorm.png" title="'Settings in PHPStorm'" ></p>

<p>Note that I have created a &ldquo;scope&rdquo; called Theme. Scopes in PHPStorm are parts of your project that you would like included or excluded in things like searches and settings like this Compass setup. There is no reason for PHPStorm to listen for changes to your module files if your theme folder is where you have your Compass project. So if you click the button with the three dots at the scope field you can setup PHPStorm to only look where it is relevant. I use scopes a lot to cut down on how long searches take, so setting up a few scopes for each project is time well spent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A git commit hook helps you keep your code clean]]></title>
    <link href="http://naxoc.net/2012/11/26/a-git-commit-hook-helps-you-keep-your-code-clean/"/>
    <updated>2012-11-26T22:18:00+01:00</updated>
    <id>http://naxoc.net/2012/11/26/a-git-commit-hook-helps-you-keep-your-code-clean</id>
    <content type="html"><![CDATA[<p>I like to keep my code free of trailing whitespace. I feel what xjm describes as &ldquo;<a href="http://xjm.drupalgardens.com/review-guide">spinach in your teeth</a>&rdquo; about whitespace and non-conforming coding standards.</p>

<p>I got (heavily) inspired by Josh The Geek&rsquo;s <a href="http://drupal.org/sandbox/JoshTheGeek/1143338">git pre-commit hook</a>, and made myself a commit hook that will check the code I am about to commit for common errors. In addition to whitespace, I like to make sure that I don&rsquo;t accidentally commit debug code like <code>krumo()</code>. The commit hook also checks for common calls to debug functions.</p>

<p>If you want to use it, simply put it in your .git/hooks folder in your git checkout. Make sure the file is executable with <code>chmod +x .git/hooks/pre-commit</code>. This will only effect the git checkout you put the commit hook in, but you can make it apply to all future checkouts by putting it in your git install directory&rsquo;s template folder. Where that folder is will vary, but on my mac it is in /usr/share/git-core/templates/hooks.</p>

<p>The script is not the most clever in the world, so it will be wrong about some things from time to time. You can override it and still commit with the command <code>git commit -n</code></p>

<p>Here is the pre-commit file: <a href="https://gist.github.com/naxoc/4150599">Gist is here</a> &ndash; I find that the gist plugin for Octopress is horribly broken.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#!/usr/bin/php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @file</span>
</span><span class='line'><span class="sd"> * This is a Git pre-commit hook that informs you when you are</span>
</span><span class='line'><span class="sd"> * about to commit whitespace or a debug function.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$red</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[1;31m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$red_end</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[0m&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$yellow</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[1;33m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$yellow_end</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[0m&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * An array of functions to check for.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$check</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; dsm(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; dpm(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; dpr(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; dprint_r(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; db_queryd(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; krumo&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; kpr(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; kprint_r(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; var_dump(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; dd(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; drupal_debug(&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$check</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39; dpq(&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$return</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$diff</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nb">exec</span><span class="p">(</span><span class="s1">&#39;git diff --staged&#39;</span><span class="p">,</span> <span class="nv">$diff</span><span class="p">,</span> <span class="nv">$return</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$return</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">fwrite</span><span class="p">(</span><span class="nx">STDOUT</span><span class="p">,</span> <span class="s2">&quot;git diff returned an error. Commit aborted.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$diff</span> <span class="k">as</span> <span class="nv">$lineno</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Skip the line if you aren&#39;t adding something that may contain a debug</span>
</span><span class='line'>    <span class="c1">// function call.</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$check</span> <span class="k">as</span> <span class="nv">$lineno</span> <span class="o">=&gt;</span> <span class="nv">$function</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">strstr</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="nv">$function</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">fwrite</span><span class="p">(</span><span class="nx">STDOUT</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">{</span><span class="nv">$red</span><span class="si">}</span><span class="s2">Oh, noes! You were about to commit a </span><span class="si">$function</span><span class="s2">)?</span><span class="si">{</span><span class="nv">$red_end</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">fwrite</span><span class="p">(</span><span class="nx">STDOUT</span><span class="p">,</span> <span class="nv">$yellow</span> <span class="o">.</span> <span class="nv">$line</span> <span class="o">.</span> <span class="nv">$yellow_end</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">fwrite</span><span class="p">(</span><span class="nx">STDOUT</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Commit aborted.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">exit</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$whitespace</span> <span class="o">=</span> <span class="nb">shell_exec</span><span class="p">(</span><span class="s1">&#39;git diff --staged --check&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$whitespace</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">fwrite</span><span class="p">(</span><span class="nx">STDOUT</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">{</span><span class="nv">$red</span><span class="si">}</span><span class="s2">Commit aborted. Fix trailing whitespace.</span><span class="si">{</span><span class="nv">$red_end</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">fwrite</span><span class="p">(</span><span class="nx">STDOUT</span><span class="p">,</span> <span class="nv">$yellow</span> <span class="o">.</span> <span class="nv">$whitespace</span> <span class="o">.</span> <span class="nv">$yellow_end</span><span class="p">);</span>
</span><span class='line'>  <span class="k">exit</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If this is still running, all is peachy. Let the developer commit.</span>
</span><span class='line'><span class="k">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using specific versions of formula with Homebrew]]></title>
    <link href="http://naxoc.net/2012/06/05/using-specific-versions-of-formula-with-homebrew/"/>
    <updated>2012-06-05T13:54:00+02:00</updated>
    <id>http://naxoc.net/2012/06/05/using-specific-versions-of-formula-with-homebrew</id>
    <content type="html"><![CDATA[<p>I have my LAMP stack and other things set up on my mac with the wonderful <a href="http://mxcl.github.com/homebrew">Homebrew</a>.</p>

<p>I recently did a <code>brew upgrade</code> on my system and it seemed that everything went smooth. But when I later ran PHP from the command line I got this error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PHP Warning:  PHP Startup: Unable to load dynamic library '/usr/local/Cellar/memcached-php/2.0.1/memcached.so' - dlopen(/usr/local/Cellar/memcached-php/2.0.1/memcached.so, 9): Library not loaded: /usr/local/lib/libmemcached.9.dylib
</span><span class='line'>  Referenced from: /usr/local/Cellar/memcached-php/2.0.1/memcached.so
</span><span class='line'>  Reason: image not found in Unknown on line 0</span></code></pre></td></tr></table></div></figure>


<p>I poked around in my php.ini to see if the wrong file was being included or something like that, but it turned out that I had upgraded to a newer version of libmemcached than the one memcached was using. So I needed to downgrade libmemcached. Here is how to switch to any version available with Homebrew:</p>

<ol>
<li>
<code>brew versions libmemcached</code>
</li>
<li>
Find and note the version number you want. In my case I wasn&#8217;t sure, so I just went with the second newest and that worked.
</li>
<li>
<code>brew switch libmemcached 1.0.4</code>
</li>
</ol>


<p>Change the version number and the formula above to whatever makes sense for what you are doing.</p>

<p>The example above is using a command that is an <a href="https://github.com/mxcl/homebrew/wiki/External-Commands">external command</a> for Homebrew. It works super fast and is easy to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's with the weird name?]]></title>
    <link href="http://naxoc.net/2012/02/05/whats-with-the-weird-name/"/>
    <updated>2012-02-05T19:09:00+01:00</updated>
    <id>http://naxoc.net/2012/02/05/whats-with-the-weird-name</id>
    <content type="html"><![CDATA[<p>So, Camilla.. Why is your nick everywhere <em>naxoc</em>?.</p>

<p>Xoc means shark in Yucatec Maya. It might actually be <a href="" title="http://en.wikipedia.org/wiki/Yucatec_Maya_language#English_words_derived_from_Maya">one of the very few words that made it into English</a>. I used to study American Indian Language and Culture at the University of Copenhagen. Those were the days with much nerding over Mayan hieroglyphics. Maya hieroglyphic texts are often about how fantastic the rulers where and one of the more fantastic female rulers was called <a href="" title="http://en.wikipedia.org/wiki/Lady_Xoc">Lady Xoc</a>. I thought she was pretty cool, so I stole the name. The Na- prefix is simply a marker for female. So there is the story of my weird nick.</p>

<p>It is pronounced “nashoc”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navigating with Krumo]]></title>
    <link href="http://naxoc.net/2011/09/14/navigating-with-krumo/"/>
    <updated>2011-09-14T09:13:00+02:00</updated>
    <id>http://naxoc.net/2011/09/14/navigating-with-krumo</id>
    <content type="html"><![CDATA[<p><a href="http://drupal.org/project/devel" title="Devel | drupal.org">The Devel module</a> includes the super helpful <a href="http://krumo.sourceforge.net/">Krumo library</a>. I use <code>dsm()</code> and <code>krumo()</code> all the time. If you are not familiar with Devel, you should try it. Morten Wulff wrote a <a href="https://ratatosk.backpackit.com/pub/1836982-debugging-drupal">demo page for the module</a>.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/krumo.png">
Today a client suggested that the Devel module Krumo could display the &ldquo;path&rdquo; to an item in an array by right clicking or otherwise interacting with the nested elements in the output from Krumo. I was really excited about that idea &ndash; I can&rsquo;t count the number of times I have tried and failed to target an item deep in a form array or an item in the node object simply because my human brain can&rsquo;t remember a structure like <code>$form['#node']-&gt;content['links']['comment']['#attributes']['class']</code> for more than 3 seconds.</p>

<p>Still very happy with this new idea I went straight home and started to hack away at the Krumo library to make it display the path to a desired item. After looking at the javascript for a while, and saying out loud that Javascript hates me, I realized that the killer feature I was trying to make already exists in Krumo! This is a well hidden gem that I haven&rsquo;t seen before today, so I thought I would share it:
If you double click an item in the Krumo output it prints the items array &ldquo;path&rdquo; so that you can copy paste it into your code and stop worrying about remembering long array structures.
<img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/krumo_path.png" title="'krumo with array path'" >
Thanks to Niels Fanøe for the inspiration.</p>

<p>EDIT: I was using the dev D7 version, and the feature just went in this August. Thanks to Mark Theunissen for pointing that out. I also feel less stupid for not discovering the feature before now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving an iTunes Library]]></title>
    <link href="http://naxoc.net/2011/05/11/moving-an-itunes-library/"/>
    <updated>2011-05-11T15:22:00+02:00</updated>
    <id>http://naxoc.net/2011/05/11/moving-an-itunes-library</id>
    <content type="html"><![CDATA[<p>If you are moving an iTunes library to a new mac it will go smooth if the user login is the same. So if I move my iTunes library from an old machine where it was located in <code>/Users/ckj/iTunes</code> to a new machine where it is gonna go in <code>/Users/ckj/iTunes</code> &ndash; I have no problems. But if I changed to another username on the new machine &ndash; all the paths in the iTunes Library.xml file will not be correct anymore. I have moved libraries so many times now and I thought I would share a really quick way to fix the iTunes Library.xml file to reflect the correct user directory.</p>

<p>If you use the built-in command line tool called <a href="http://en.wikipedia.org/wiki/Sed">sed</a>, you can type one line in the terminal and be done. Let’s say I was moving from a mac with a user directory called &ldquo;ckj&rdquo; to another machine with a user directory called &ldquo;naxoc&rdquo;. All I would have to do in the terminal would be this:</p>

<ol>
<li>cd to the iTunes folder in the user directory you are moving to.</li>
<li>Enter this: <code>sed -i "" -e "s,Users/ckj,Users/naxoc,g" files iTunes\ Library.xml</code></li>
</ol>


<p>Note the funky syntax with the <code>-i ""</code> This is a mac quirck in sed. I found some info on it <a href="http://stackoverflow.com/questions/2320564/variations-of-sed-between-osx-and-gnu-linux">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hot Laptop? Vacuum it!]]></title>
    <link href="http://naxoc.net/2011/04/27/hot-laptop-vacuum-it/"/>
    <updated>2011-04-27T21:48:00+02:00</updated>
    <id>http://naxoc.net/2011/04/27/hot-laptop-vacuum-it</id>
    <content type="html"><![CDATA[<p>My beloved 3years old Macbook Pro was starting to get really hot when I used it. It had gotten to the point where I would burn my legs if it was on my lap, and since having your <em>lap</em>top on the lap is kinda the point, I felt had to do something about it.</p>

<p>I bought a <a href="%E2%80%9Chttp://www.amazon.com/Logitech-Notebook-Cooling-N100-Gray/dp/B003BEDQYY/ref=sr_1_1?ie=UTF8&amp;qid=1303933766&amp;sr=8-1%E2%80%9D">Logitech Notebook Cooling Pad</a> that actually is very comfortable and does exactly as it says it will, but I was still curious to see if I could get my old healthy Macbook back.</p>

<p>I found <a href="%E2%80%9Chttp://www.andrew.co.za/2008/02/quick-macbook-clean.html%E2%80%9D">this blog post</a> about how to vacuum the laptop and the result is amazing. I was a little worried about the static, so I turned the machine completely off and removed the battery before vacuuming. The happy laptop is now quieter and cooler! Very simple and very recommended.</p>

<p><img class="center" src="http://naxoc.net/files/naxoc.net/styles/large/public/kitty_vacuum.jpg">
<em>Image from <a href="http://www.flickr.com/photos/noortje/268437984/"><em>n</em>o<em>o</em>r*</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pet peeve #1 - the comparison operator]]></title>
    <link href="http://naxoc.net/2010/12/10/pet-peeve-number-1-the-comparison-operator/"/>
    <updated>2010-12-10T14:27:00+01:00</updated>
    <id>http://naxoc.net/2010/12/10/pet-peeve-number-1-the-comparison-operator</id>
    <content type="html"><![CDATA[<p>I have a lot of pet peeves when it comes to programming, databases, web content, food, beer, and, well just about everyting. I am thinking of making a series of pet peeves here on this site. Some will seem like plain rants, and others will be more like tips.</p>

<p>When making comparisons, switch the order of the things you compare like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;book&#39;</span> <span class="o">==</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// Stuff happens.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might think why? And that looks weird! Yes, it does look a little weird. But I do this to not accidentially assign the $node->type the value I am comparing it with. It is hell to find an error like this when debugging:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$node</span><span class="o">-&gt;</span><span class="na">type</span> <span class="o">=</span> <span class="s1">&#39;book&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// Stuff happens whether you like it or not.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>See what happened? I only put one = instead of two. PHP will not complain about this, I will just not get what I expect. If I had switched the items, PHP would have complained as I tried to assign an object to a non-variable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social media meta]]></title>
    <link href="http://naxoc.net/2010/10/20/social-media-meta/"/>
    <updated>2010-10-20T11:33:00+02:00</updated>
    <id>http://naxoc.net/2010/10/20/social-media-meta</id>
    <content type="html"><![CDATA[<p>I am doing some integration with facebook these days. I don&rsquo;t use facebook much and I certainly no not want all kinds of test data on my profile so I made a test profile using names that just came to mind :-P</p>

<p>On the facebook developer pages there is a demonstration of the like button. That you can like&hellip; Gotta love the meta!</p>

<p><img class="center" src="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/like.png"></p>
]]></content>
  </entry>
  
</feed>

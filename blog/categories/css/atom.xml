<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | naxoc.net]]></title>
  <link href="http://naxoc.net/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://naxoc.net/"/>
  <updated>2014-01-15T14:08:48+01:00</updated>
  <id>http://naxoc.net/</id>
  <author>
    <name><![CDATA[Camilla Krag Jensen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Organizing code when using Modernizr and SASS]]></title>
    <link href="http://naxoc.net/2014/01/15/organizing-code-when-using-modernizr-and-scss/"/>
    <updated>2014-01-15T12:45:00+01:00</updated>
    <id>http://naxoc.net/2014/01/15/organizing-code-when-using-modernizr-and-scss</id>
    <content type="html"><![CDATA[<p>The JS library <a href="http://modernizr.com">Modernizr</a> makes it really easy to write CSS with support for older browsers. What it does is put classes in the <code>&lt;body&gt;</code> tag that will tell you what the browser doesn&rsquo;t support. For instance IE9 in the screenshot does not support CSS gradients:</p>

<p><img class="center <a" src="href="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/modernizr_body_tag_classes.png">https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/modernizr_body_tag_classes.png</a>"></p>

<p>I was going trough with IE9 on a rather large site that uses some spiffy CSS3 tricks to achieve awesome. It has been a pleasure to work with <a href="http://compass-style.org/">Compass</a> and SASS to build the site, but when it came to making it look decent in IE9 there was some work to be done.</p>

<p>I started to work on it, but I quickly got frustrated with the organization of the SCSS. Where should I put the IE-fallbacks? In a ie9.css style sheet? Well, that really keeps the code scattered everywhere. I wanted to keep the fallbacks as close to the original CSS3 tricks as I could so I started putting code like this as close to the &ldquo;real&rdquo; selector as I could:
``` css
.some-div {
  .special-list {</p>

<pre><code>.extra-special-link {
  @include background(linear-gradient(left, rgba(242, 156, 45, 0), rgba(242, 156, 45, 1) 30%, rgba(242, 156, 45, 1) 70%, rgba(242, 156, 45, 0)),
}
</code></pre>

<p>  }
}
// Also support archaic browsers for the extra special link (see above).
.no-cssgradients .some-div .special-list .extra-special-link {
  background: rgba(242, 156, 45, 0);
}
<code>
While this works, it becomes hard to find out what the targets are, because the whole structure needs to be prefixed with the `no-cssgradients` class. I would much rather have the fallbacks in the code right next to the 'actual' CSS. I did some googling for best practices for structuring the code and found [this post](http://neilcarpenter.com/2013/05/graceful-degradation-workflow-using-feature-detection-and-css-preprocessors/) on Neil Carpenter's blog that showed me that the '&amp;' ampersand used _behind_ the selector will do exactly what I wanted! This may be really trivial, but I had no idea the ampersand could be used like that in SASS. So the above code can be simplified to:
</code> css
.some-div {
  .special-list {</p>

<pre><code>.extra-special-link {
  @include background(linear-gradient(left, rgba(242, 156, 45, 0), rgba(242, 156, 45, 1) 30%, rgba(242, 156, 45, 1) 70%, rgba(242, 156, 45, 0)),
  .no-cssgradients &amp; {
    background: rgba(242, 156, 45, 0);
  }
}
</code></pre>

<p>  }
}
```
Yay! I can now keep my fallbacks together with the actual CSS and never worry about ie9.css or other tricks that separate the fallbacks from reality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a file watcher for Compass in PHPStorm]]></title>
    <link href="http://naxoc.net/2013/10/06/setting-up-a-file-watcher-for-compass-in-phpstorm/"/>
    <updated>2013-10-06T20:55:00+02:00</updated>
    <id>http://naxoc.net/2013/10/06/setting-up-a-file-watcher-for-compass-in-phpstorm</id>
    <content type="html"><![CDATA[<p>EDIT: <em>It seems that the version 7 early access now has a file watcher preset for Compass &ndash; nice work JetBrains! The part about scope from this blog post is still useful to you if you are on PHPStorm 7 though.</em></p>

<p>I started using PHPStorm about 6 months ago and while it is an extremely awesome and powerful IDE there are just so many things you can set up and configure. I have to admit that for the first couple of months I pretty much used PHPStorm just like I did Vim and not using any of the many configurable things except for the debugger. I am slowly venturing into playing around with setting more stuff up, and I thought I would share this one because it took me a while to get right.</p>

<p>It is super simple to use the <a href="http://compass-style.org/">Compass compiler</a> from the command line and I always have. But PHPStorm can compile your .scss files into .css on the fly so why not take advantage of that.</p>

<p>So here is what I did. The settings assume that you use something that resembles the default settings in a Compass project with a folder for the scss files and the css being output to another folder called something like &ldquo;stylesheets&rdquo; or &ldquo;css&rdquo; (could be anything really). You also need to have <a href="http://compass-style.org/install/">Compass installed on your machine</a>.</p>

<ol>
<li>In the PHPStorm settings, go to &ldquo;File Watchers&rdquo;.</li>
<li>Click the plus to add a watcher and choose SCSS.</li>
<li>Edit the settings to look like the ones on the screenshot. Where Compass is installed on your machine may not be in /usr/bin/compass like it is on mine, but you can use the command <code>whereis compass</code> from your command line to figure out where compass is. The output path is &ldquo;stylesheets&rdquo; for me for this particular project, but you shold edit that to whatever your project has named the css output folder.</li>
</ol>


<p><img class="center <a" src="href="https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/compass-phpstorm.png">https://dl.dropboxusercontent.com/u/157691/cdn/naxocnet/compass-phpstorm.png</a>" title="&lsquo;Settings in PHPStorm&rsquo;" ></p>

<p>Note that I have created a &ldquo;scope&rdquo; called Theme. Scopes in PHPStorm are parts of your project that you would like included or excluded in things like searches and settings like this Compass setup. There is no reason for PHPStorm to listen for changes to your module files if your theme folder is where you have your Compass project. So if you click the button with the three dots at the scope field you can setup PHPStorm to only look where it is relevant. I use scopes a lot to cut down on how long searches take, so setting up a few scopes for each project is time well spent.</p>
]]></content>
  </entry>
  
</feed>
